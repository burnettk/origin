
This is an outline of the basic steps to creating a new automated test. Find a 
task to be performed. Example is log in as an AEB as an AriaAuthor and find a 
Biblio service request and test it. In this case setting Level selection on
the left of the Advanced Engish Editor to All Levels ...:

See: https://jira.trstone.com/wiki/display/ARIA/Testing

"AriaAuthor - Gives access to the Editor.  This role is required along with either 
AriaEditorUser, SEUEditorUser, or SFHEditorUser to access the Editor without error." 

1. Log in to:
	https://login-qa2.dev.rosettastone.com/#/login    
as:
	test_aria_author@livemocha.com / password

2. Open Chrome->More Tools-> Developer Tools and click on Advanced English Editor. For this
example click on the Filters -> Product -> Advanced English for Business.

3. Find a Biblio request in the Network request list that might generally resemble:

Accept:application/json, text/plain, */*
Accept-Encoding:gzip, deflate, sdch
Accept-Language:en-US,en;q=0.8
Authorization:Bearer 4ffefffb-4a24-40f3-b012-7705cb82a980
Connection:keep-alive
Host:biblio-qa2.dev.rosettastone.com
Origin:https://aebeditor-qa2.dev.rosettastone.com
Referer:https://aebeditor-qa2.dev.rosettastone.com/
User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36
X-Livemocha-Product:Product:Aria
X-Requested-With:Ceres

4. Right click over the list item and select Copy as cURL. In an editor paste the
cURL command for testing. Something like:

curl 'https://biblio-qa2.dev.rosettastone.com/levels/Product%3AAria' -H 'Authorization: Bearer 4ffefffb-4a24-40f3-b012-7705cb82a980' -H 'Origin: https://aebeditor-qa2.dev.rosettastone.com' -H 'Accept-Encoding: gzip, deflate, sdch' -H 'Accept-Language: en-US,en;q=0.8' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36' -H 'Accept: application/json, text/plain, */*' -H 'Referer: https://aebeditor-qa2.dev.rosettastone.com/' -H 'X-Requested-With: Ceres' -H 'X-Livemocha-Product: Product:Aria' -H 'Connection: keep-alive' --compressed

Or formatted for reading like:

curl \
'https://biblio-qa2.dev.rosettastone.com/levels/Product%3AAria' \
-H 'Authorization: Bearer 4ffefffb-4a24-40f3-b012-7705cb82a980' \
-H 'Origin: https://aebeditor-qa2.dev.rosettastone.com' \
-H 'Accept-Encoding: gzip, deflate, sdch' \
-H 'Accept-Language: en-US,en;q=0.8' \
-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36' \
-H 'Accept: application/json, text/plain, */*' \
-H 'Referer: https://aebeditor-qa2.dev.rosettastone.com/' \
-H 'X-Requested-With: Ceres' \
-H 'X-Livemocha-Product: Product:Aria' \
-H 'Connection: keep-alive' \
--compressed

5. Test running the cURL command on the command line. Capture the response in text and paste it
in a JSON formatter and save it for analysis:

[
  "B1",
  "B2",
  "C1"
]

6. Write an automated test, which is likely located in the "asgard" repository. Follow the following steps to set up the environment here:

  https://jira.trstone.com/wiki/display/REQ/Automation

7. Once the test has been written and is stored in asgard/util/src/python/test/biblio/*.py, to run the specific test use the nosetests
command and run the test based on the Attribute annotation contained in the .py file. Example: in content_test.py above the function
to be run (Example: :

	@attr('acceptance', 'content/activity_set', 'roll-out')
	def test_that_endpoint_returns_activity_sets_by_id(self):

The attribute for automated tests we will use is 'content/activity_set'. The command is run like:

	cd asgard/util/src/python/test/biblio
	nosetests -v -a 'content/activity_set'

This will run the single test under that endpoint attribute and would look like this for output:

	Tests the endpoint /content/activity_set returns the list of activitySets based on the given query_string ... ok
        ...


